services:
  # Сервис для бэкенда (NestJS)
  backend:
    build:
      context: ./backend # Путь к директории с Dockerfile бэкенда
      dockerfile: Dockerfile
      target: development # Используем этап development для разработки с hot-reload
    container_name: brainmessenger-backend
    # Монтируем исходный код бэкенда в контейнер для hot-reloading
    # Исключаем node_modules, чтобы использовать установленные в контейнере
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    # Запускаем в режиме разработки с watch
    command: npm run start:dev
    ports:
      - "4000:4000" # Пробрасываем порт 4000 (бэкенд)
    environment:
      # Передаем переменные окружения, если они нужны бэкенду
      # Используем DATABASE_URL из .env для подключения к Neon
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET:-your-default-jwt-secret} # Use from .env or default
      # Cloudflare R2 Credentials from .env
      R2_ACCESS_KEY: ${R2_ACCESS_KEY}
      R2_SECRET_KEY: ${R2_SECRET_KEY}
      R2_ENDPOINT: ${R2_ENDPOINT}
      R2_BUCKET: ${R2_BUCKET}
      # Firebase Credentials from .env
      FIREBASE_API_KEY: ${FIREBASE_API_KEY}
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      # Redis Config from .env
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD} # Optional, will be empty if not set in .env
      # Other variables
      PORT: ${PORT:-4000} # Use from .env or default
    depends_on:
      # - db # Раскомментируйте, если добавляете сервис базы данных
      # - nhost # Removed Nhost dependency
    networks:
      - brainmessenger-network

  # Сервис для фронтенда (Next.js)
  frontend:
    build:
      context: ./frontend # Путь к директории с Dockerfile фронтенда
      dockerfile: Dockerfile
      # target: development # Для разработки можно не указывать target или создать отдельный этап
    container_name: brainmessenger-frontend
    # Монтируем исходный код фронтенда для hot-reloading
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next # Исключаем .next хоста, чтобы использовать сгенерированный в контейнере
    # Запускаем в режиме разработки
    command: npm run dev
    ports:
      - "3000:3000" # Пробрасываем порт 3000 (фронтенд)
    environment:
      # Передаем переменные окружения для фронтенда
      NEXT_PUBLIC_GRAPHQL_URL: http://backend:4000/graphql # Используем имя сервиса 'backend'
      NEXT_PUBLIC_WS_URL: ws://backend:4000/graphql       # Используем имя сервиса 'backend'
      # CHOKIDAR_USEPOLLING: "true" # Может понадобиться для hot-reload на некоторых системах
    depends_on:
      - backend # Фронтенд зависит от бэкенда
    networks:
      - brainmessenger-network

# --- Nhost Service Definition Removed ---
  # Опционально: Сервис для базы данных PostgreSQL (если не используется Nhost)
  # db:
  #   image: postgres:15-alpine
  #   container_name: brainmessenger-db
  #   environment:
  #     POSTGRES_USER: your_db_user
  #     POSTGRES_PASSWORD: your_db_password
  #     POSTGRES_DB: brainmessenger
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   ports:
  #     - "5433:5432" # Пробрасываем порт БД (5433, чтобы не конфликтовать с локальным)
  #   networks:
  #     - brainmessenger-network

# Определяем сеть для взаимодействия контейнеров
networks:
  brainmessenger-network:
    driver: bridge

# Определяем тома для сохранения данных (если нужны)